The pysyte.types.times module
=============================

    >>> from pysyte.types import times
    >>> assert 'datetime for pysyte types' in times.__doc__

More imports to support testing
-------------------------------

    >>> import datetime
    >>> import time

Time taken
----------

Number of seconds since unix started counting is rather large
    At least a billion of them
    >>> assert times.seconds_since_epoch() > 1_000_000_000

And that number should increase monotonically
    >>> one = times.seconds_since_epoch()
    >>> time.sleep(1)
    >>> two = times.seconds_since_epoch()
    >>> diff = two - one
    >>> assert diff == 1, f'{diff}'

Which is at least a trillion microseconds
    >>> assert times.microseconds_since_epoch() > 1_000_000_000_000

Again - that should increase on each call
    >>> one = times.microseconds_since_epoch()
    >>> time.sleep(0.1)
    >>> two = times.microseconds_since_epoch()
    >>> diff = two - one
    >>> assert diff > 0, f'{diff}'

Time diffs
----------

Anyone remeber Christamas 1979?
    >>> one = datetime.datetime(1979, 12, 25, 1, 2, 3)

Another time, 2 seconds later
    >>> two = datetime.datetime(1979, 12, 25, 1, 2, 5)
    >>> diff = two - one
    >>> assert times.seconds_taken(two - one) == 2
    >>> assert times.taken(two - one) == 2000

Increase two by one minute (60 seconds)
    >>> two = datetime.datetime(1979, 12, 25, 1, 3, 5)
    >>> assert times.seconds_taken(two - one) == 62

Now
---

There's a convenience function to get "now"
That function just calls the epontymous function in datetime
To test we'll inevitably call microseconds apart
    So enough to check that the time taken is less than a second
    >>> assert times.seconds_taken(times.now() - datetime.datetime.now()) < 1
